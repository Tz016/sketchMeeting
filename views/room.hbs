<style>
    #myContainer {
        position: fixed;
        left: 0px;
        top: 0px;
        width: 100%;
        height: 100%;
        z-index: 99;
    }

    #homeButton {
        bottom: 2%;
        height: 5%;
    }

    #participantsButton {
        bottom: 8%;
        height: 10%;
    }

    button {
        position: fixed;
        left: 2px;
        width: 8em;
        background-color: white;
        border: none;
        color: black;
    }

    h1 {
        position: fixed;
        background-color: white;
    }

    button:hover {
        font-weight: bolder;
    }

    #participantsList {
        position: fixed;
        left: 20%;
        top: 30%;
        width: 60%;
        height: 60%;
        background-color: white;
    }
</style>
<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.1/p5.min.js"
    integrity="sha512-jLPBEs8Tcpbj4AlLISWG0l7MbuIqp1cFBilrsy0BhvNUa0BLB4wVQeoL+93OYOdENFPKLOgrzb1Nytn+5N5y7g=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdn.jsdelivr.net/npm/fingerpose@0.1.0/dist/fingerpose.min.js" type="text/javascript"></script>

<script src="https://unpkg.com/@tensorflow/tfjs-core@3.7.0/dist/tf-core.js"></script>
<script src="https://unpkg.com/@tensorflow/tfjs-converter@3.7.0/dist/tf-converter.js"></script>
<script src="https://unpkg.com/@tensorflow/tfjs-backend-webgl@3.7.0/dist/tf-backend-webgl.js"></script>

<script src="https://unpkg.com/@tensorflow-models/handpose@0.0.7/dist/handpose.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script type="module" src="../../sketch.mjs"></script>
<h1>{{roomName}}</h1>
<div id="canvasContainer"> </div>
<video id="video" style="width: 100%;height:100%"></video>

<button id="participantsButton">Participants</button>
<button id="homeButton">Back</button>
<div id="participantsList" style="display: none;">
    {{!-- --}}
</div>

<script type="module">
    //const socket = io("http://linserv1.cims.nyu.edu:23347");
    const participantsList = document.getElementById("participantsList");
    const socket = io("http://localhost:23347")

    socket.on('connect', function () {
        console.log("Connected");
    });

    let userlist = [];
    const roomNumber = {{ roomNumber }};
    const username = "{{username}}";
    socket.emit('join-room', {
        roomNumber,
        username
    })
    socket.on('user-joined', (data) => {
        console.log(data)
    })
    socket.on('user-list', (data) => {
        userlist = data;
        participantsList.textContent = userlist;
    })
    const homeButton = document.getElementById('homeButton');
    homeButton.addEventListener('click', () => {
        window.location.href = "/home/{{username}}"; // 页面跳转到主页
        const xhr = new XMLHttpRequest();
        xhr.open('POST', '/close-connection/{{roomNumber}}/{{username}}');
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send();
    });

    const openPageButton = document.getElementById('participantsButton');
    // const participantsList = document.getElementById('participantsList'); 

    // 当鼠标悬停在按钮上时显示列表
    openPageButton.addEventListener('mouseenter', function () {
        participantsList.style.display = 'block';
    });

    // 当鼠标移出按钮时隐藏列表
    openPageButton.addEventListener('mouseleave', function () {
        participantsList.style.display = 'none';
    });



    new p5(function (p) {
        let fingerTrails = []
        let video
        let model
        let isDetectorReady = false;
        const indexout = new fp.GestureDescription('index_out');
        indexout.addCurl(fp.Finger.Index, fp.FingerCurl.NoCurl, 1.0);
        indexout.addCurl(fp.Finger.Index, fp.FingerCurl.HalfCurl, 1.0);
        indexout.addCurl(fp.Finger.Thumb, fp.FingerCurl.HalfCurl, 1.0);
        for (let finger of [fp.Finger.Thumb, fp.Finger.Middle, fp.Finger.Ring, fp.Finger.Pinky]) {
            indexout.addCurl(finger, fp.FingerCurl.FullCurl, 1.0);
        }

        const splayout = new fp.GestureDescription('splayout');

        for (let finger of [fp.Finger.Thumb, fp.Finger.Index, fp.Finger.Middle, fp.Finger.Ring, fp.Finger.Pinky]) {
            splayout.addCurl(finger, fp.FingerCurl.NoCurl, 1.0);
        }

        const GE = new fp.GestureEstimator([
            indexout,
            splayout,
            // fp.Gestures.ThumbsUpGesture
        ]);
        let receivedFingerTrails = [];
        let smoothedX = 0;
        let smoothedY = 0;
        let smoothingFactor = 0.9; // 调整此值以控制平滑程度
        let userTrails={};
        p.setup = async function () {
            let canvas = p.createCanvas(p.windowWidth, p.windowHeight);
            canvas.parent("canvasContainer");
            p.background(0);
            model = await handpose.load();
            isDetectorReady = true
            video = document.getElementById('video');

            // 使用 getUserMedia 方法获取摄像头视频流
            navigator.mediaDevices.getUserMedia({ video: true })
                .then(stream => {
                    video.srcObject = stream; // 将视频流赋值给 <video> 元素的 srcObject 属性
                    video.style.transform = 'scaleX(-1)';
                    video.play();

                    // 隐藏视频元素
                    video.style.display = 'none';
                    // video.style.width = p.windowWidth + 'px'; // 设置 video 元素的宽度为窗口宽度
                    // video.style.height = p.windowHeight + 'px'; // 设置 video 元素的高度为窗口高度
                })
                .catch(error => {
                    console.error('Error accessing media devices.', error);
                });


            // 初始化 socket 连接
            socket.on('sketch', (data) => {
    const { username, fingerTrails } = data;
    if (!userTrails[username]) {
        userTrails[username] = [];
    }
    userTrails[username] = userTrails[username].concat(fingerTrails);
});
            // 监听 'sketch' 事件
            
        }

        p.draw = async function () {
            

            if (!isDetectorReady) {
                return;
            }
            p.background(0)
            //fingerTrailSketch(fingerTrails);
            //fingerTrailSketch(receivedFingerTrails);
            for (const [username, trails] of Object.entries(userTrails)) {
        fingerTrailSketch(trails);
    }




            const predictions = await model.estimateHands(video, true);
            if (predictions.length > 0) {
                const hand = predictions[0]
                // 绘制连接线
                handSketch(hand);
                const estimatedGestures = GE.estimate(predictions[0].landmarks, 4);
                if (estimatedGestures['gestures'].length > 0) {
                    //console.log(estimatedGestures['gestures'])
                    if (estimatedGestures['gestures'][0].name == 'splayout') {
                        fingerTrails = []
                        userTrails={};
                        //console.log('clear')
                    } else if (estimatedGestures['gestures'].length == 2) {
                        if (estimatedGestures['gestures'][0].score < estimatedGestures['gestures'][1].score) {
                            fingerTrails = [];
                            userTrails={};
                            //console.log('clear')
                        } else {
                            index(hand)
                        }
                    } else {
                        index(hand)
                    }
                    socket.emit('sketch', {
                        username,
                        roomNumber,
                        fingerTrails: fingerTrails.map(trail => ({
                            x: trail.x,
                            y: trail.y,
                            startSize: trail.startSize,
                            endSize: trail.endSize,
                            startAlpha: trail.startAlpha,
                            endAlpha: trail.endAlpha
                        }))
                    });


                }
            }
        }



        function fingerTrailSketch(trails) {
    for (let i = 0; i < trails.length; i++) {
        const trail = trails[i];
        const alpha = p.map(i, 0, trails.length - 1, trail.startAlpha, trail.endAlpha);
        const size = p.map(i, 0, trails.length - 1, trail.startSize, trail.endSize);

        p.fill(255, alpha);
        p.noStroke();
        p.circle(trail.x, trail.y, size);
    }
}

        function index(hand) {
            let [x, y, z] = hand.landmarks[8];
            x = x * 2 + p.windowWidth;
            y = y * 2;

            smoothedX = smoothingFactor * smoothedX + (1 - smoothingFactor) * x;
            smoothedY = smoothingFactor * smoothedY + (1 - smoothingFactor) * y;

            fingerTrails.push({
                x: smoothedX,
                y: smoothedY,
                startSize: 20,
                endSize: 5,
                startAlpha: 255,
                endAlpha: 100
            });
        }
        function handSketch(hand) {
            p.stroke(255);
            p.beginShape();
            for (let landmark of hand.landmarks) {
                const [x, y, z] = landmark;
                p.vertex(x * 2 + p.windowWidth, y * 2);
            }
            p.endShape(p.CLOSE); // 连接最后一个点和第一个点，形成闭合图形
        }
    }
    );


</script>